files:
  - Spring
  - Elide Standalone

Spring: |+2
  <br/>
  Create a `@Configuration` class that defines your custom implementation as a `@Bean`.

  ```java
  @Configuration
  public class ElideConfiguration {
      @Bean
      public DataSourceConfiguration dataSourceConfiguration() {
          return new DataSourceConfiguration() {
              @Override
              public DataSource getDataSource(DBConfig dbConfig, DBPasswordExtractor dbPasswordExtractor) {
                  HikariConfig config = new HikariConfig();

                  config.setJdbcUrl(dbConfig.getUrl());
                  config.setUsername(dbConfig.getUser());
                  config.setPassword(dbPasswordExtractor.getDBPassword(dbConfig));
                  config.setDriverClassName(dbConfig.getDriver());
                  dbConfig.getPropertyMap().forEach((k, v) -> config.addDataSourceProperty(k, v));

                  return new HikariDataSource(config);
              }
          };
      }
  }
  ```

Elide Standalone: |+2
  <br/>
  Override `ElideStandaloneSettings`.

  ```java
  public abstract class Settings implements ElideStandaloneSettings {
      @Override
      public DataSourceConfiguration getDataSourceConfiguration() {
          return new DataSourceConfiguration() {
              @Override
              public DataSource getDataSource(DBConfig dbConfig, DBPasswordExtractor dbPasswordExtractor) {
                  HikariConfig config = new HikariConfig();

                  config.setJdbcUrl(dbConfig.getUrl());
                  config.setUsername(dbConfig.getUser());
                  config.setPassword(dbPasswordExtractor.getDBPassword(dbConfig));
                  config.setDriverClassName(dbConfig.getDriver());
                  dbConfig.getPropertyMap().forEach((k, v) -> config.addDataSourceProperty(k, v));

                  return new HikariDataSource(config);
              }
          };
      }
  }
  ```
